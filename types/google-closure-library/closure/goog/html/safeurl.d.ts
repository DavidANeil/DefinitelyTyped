/// <reference path="../../../globals.d.ts"/>
/// <reference path="../i18n/bidi.d.ts"/>
/// <reference path="../string/typedstring.d.ts"/>
/// <reference path="../string/const.d.ts"/>
/// <reference path="./trustedresourceurl.d.ts"/>

declare module 'goog:goog.html.SafeUrl' {
    import alias = goog.html.SafeUrl;
    export default alias;
}

declare namespace goog.html {
    /**
     * A string that is safe to use in URL context in DOM APIs and HTML documents.
     *
     * A SafeUrl is a string-like object that carries the security type contract
     * that its value as a string will not cause untrusted script execution
     * when evaluated as a hyperlink URL in a browser.
     *
     * Values of this type are guaranteed to be safe to use in URL/hyperlink
     * contexts, such as assignment to URL-valued DOM properties, in the sense that
     * the use will not result in a Cross-Site-Scripting vulnerability. Similarly,
     * SafeUrls can be interpolated into the URL context of an HTML template (e.g.,
     * inside a href attribute). However, appropriate HTML-escaping must still be
     * applied.
     *
     * Note that, as documented in `goog.html.SafeUrl.unwrap`, this type's
     * contract does not guarantee that instances are safe to interpolate into HTML
     * without appropriate escaping.
     *
     * Note also that this type's contract does not imply any guarantees regarding
     * the resource the URL refers to.  In particular, SafeUrls are <b>not</b>
     * safe to use in a context where the referred-to resource is interpreted as
     * trusted code, e.g., as the src of a script tag.
     *
     * Instances of this type must be created via the factory methods
     * (`goog.html.SafeUrl.fromConstant`, `goog.html.SafeUrl.sanitize`),
     * etc and not by invoking its constructor.  The constructor intentionally
     * takes no parameters and the type is immutable; hence only a default instance
     * corresponding to the empty string can be obtained via constructor invocation.
     *
     * @see goog.html.SafeUrl#fromConstant
     * @see goog.html.SafeUrl#from
     * @see goog.html.SafeUrl#sanitize
     * @final
     * @struct
     * @implements {goog.i18n.bidi.DirectionalString}
     * @implements {goog.string.TypedString}
     */
    class SafeUrl extends __SafeUrl {}
    abstract class __SafeUrl implements goog.i18n.bidi.DirectionalString, goog.string.TypedString {
        /**
         */
        constructor();

        /**
         * The contained value of this SafeUrl.  The field has a purposely ugly
         * name to make (non-compiled) code that attempts to directly access this
         * field stand out.
         * @private {string}
         */
        private privateDoNotAccessOrElseSafeHtmlWrappedValue_: any /*missing*/;

        /**
         * A type marker used to implement additional run-time type checking.
         * @see goog.html.SafeUrl#unwrap
         * @const {!Object}
         * @private
         */
        private readonly SAFE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_: any /*missing*/;

        /**
         * Interface marker of the DirectionalString interface.
         *
         * This property can be used to determine at runtime whether or not an object
         * implements this interface.  All implementations of this interface set this
         * property to `true`.
         * @type {boolean}
         */
        implementsGoogI18nBidiDirectionalString: boolean;

        /**
         * Retrieves this object's known direction (if any).
         * @return {?goog.i18n.bidi.Dir} The known direction. Null if unknown.
         */
        getDirection(): goog.i18n.bidi.Dir|null;

        /**
         * Interface marker of the TypedString interface.
         *
         * This property can be used to determine at runtime whether or not an object
         * implements this interface.  All implementations of this interface set this
         * property to `true`.
         * @type {boolean}
         */
        implementsGoogStringTypedString: boolean;

        /**
         * Retrieves this wrapped string's value.
         * @return {string} The wrapped string's value.
         */
        getTypedStringValue(): string;
    }
}

declare namespace goog.html.SafeUrl {
    /**
     * The innocuous string generated by goog.html.SafeUrl.sanitize when passed
     * an unsafe URL.
     *
     * about:invalid is registered in
     * http://www.w3.org/TR/css3-values/#about-invalid.
     * http://tools.ietf.org/html/rfc6694#section-2.2.1 permits about URLs to
     * contain a fragment, which is not to be considered when determining if an
     * about URL is well-known.
     *
     * Using about:invalid seems preferable to using a fixed data URL, since
     * browsers might choose to not report CSP violations on it, as legitimate
     * CSS function calls to attr() can result in this URL being produced. It is
     * also a standard URL which matches exactly the semantics we need:
     * "The about:invalid URI references a non-existent document with a generic
     * error condition. It can be used when a URI is necessary, but the default
     * value shouldn't be resolveable as any type of document".
     *
     * @const {string}
     */
    const INNOCUOUS_STRING: any /*missing*/;

    /**
     * Performs a runtime check that the provided object is indeed a SafeUrl
     * object, and returns its value.
     *
     * IMPORTANT: The guarantees of the SafeUrl type contract only extend to the
     * behavior of  browsers when interpreting URLs. Values of SafeUrl objects MUST
     * be appropriately escaped before embedding in a HTML document. Note that the
     * required escaping is context-sensitive (e.g. a different escaping is
     * required for embedding a URL in a style property within a style
     * attribute, as opposed to embedding in a href attribute).
     *
     * @param {!goog.html.SafeUrl} safeUrl The object to extract from.
     * @return {string} The SafeUrl object's contained string, unless the run-time
     *     type check fails. In that case, `unwrap` returns an innocuous
     *     string, or, if assertions are enabled, throws
     *     `goog.asserts.AssertionError`.
     */
    function unwrap(safeUrl: goog.html.SafeUrl): string;

    /**
     * Creates a SafeUrl object from a compile-time constant string.
     *
     * Compile-time constant strings are inherently program-controlled and hence
     * trusted.
     *
     * @param {!goog.string.Const} url A compile-time-constant string from which to
     *         create a SafeUrl.
     * @return {!goog.html.SafeUrl} A SafeUrl object initialized to `url`.
     */
    function fromConstant(url: goog.string.Const): goog.html.SafeUrl;

    /**
     * Creates a SafeUrl wrapping a blob URL for the given `blob`.
     *
     * The blob URL is created with `URL.createObjectURL`. If the MIME type
     * for `blob` is not of a known safe audio, image or video MIME type,
     * then the SafeUrl will wrap {@link #INNOCUOUS_STRING}.
     *
     * @see http://www.w3.org/TR/FileAPI/#url
     * @param {!Blob} blob
     * @return {!goog.html.SafeUrl} The blob URL, or an innocuous string wrapped
     *   as a SafeUrl.
     */
    function fromBlob(blob: Blob): goog.html.SafeUrl;

    /**
     * Creates a SafeUrl wrapping a data: URL, after validating it matches a
     * known-safe audio, image or video MIME type.
     *
     * @param {string} dataUrl A valid base64 data URL with one of the whitelisted
     *     audio, image or video MIME types.
     * @return {!goog.html.SafeUrl} A matching safe URL, or {@link INNOCUOUS_STRING}
     *     wrapped as a SafeUrl if it does not pass.
     */
    function fromDataUrl(dataUrl: string): goog.html.SafeUrl;

    /**
     * Creates a SafeUrl wrapping a tel: URL.
     *
     * @param {string} telUrl A tel URL.
     * @return {!goog.html.SafeUrl} A matching safe URL, or {@link INNOCUOUS_STRING}
     *     wrapped as a SafeUrl if it does not pass.
     */
    function fromTelUrl(telUrl: string): goog.html.SafeUrl;

    /**
     * Creates a SafeUrl from TrustedResourceUrl. This is safe because
     * TrustedResourceUrl is more tightly restricted than SafeUrl.
     *
     * @param {!goog.html.TrustedResourceUrl} trustedResourceUrl
     * @return {!goog.html.SafeUrl}
     */
    function fromTrustedResourceUrl(trustedResourceUrl: goog.html.TrustedResourceUrl): goog.html.SafeUrl;

    /**
     * Creates a SafeUrl object from `url`. If `url` is a
     * goog.html.SafeUrl then it is simply returned. Otherwise the input string is
     * validated to match a pattern of commonly used safe URLs.
     *
     * `url` may be a URL with the http, https, mailto or ftp scheme,
     * or a relative URL (i.e., a URL without a scheme; specifically, a
     * scheme-relative, absolute-path-relative, or path-relative URL).
     *
     * @see http://url.spec.whatwg.org/#concept-relative-url
     * @param {string|!goog.string.TypedString} url The URL to validate.
     * @return {!goog.html.SafeUrl} The validated URL, wrapped as a SafeUrl.
     */
    function sanitize(url: string|goog.string.TypedString): goog.html.SafeUrl;

    /**
     * Creates a SafeUrl object from `url`. If `url` is a
     * goog.html.SafeUrl then it is simply returned. Otherwise the input string is
     * validated to match a pattern of commonly used safe URLs.
     *
     * `url` may be a URL with the http, https, mailto or ftp scheme,
     * or a relative URL (i.e., a URL without a scheme; specifically, a
     * scheme-relative, absolute-path-relative, or path-relative URL).
     *
     * This function asserts (using goog.asserts) that the URL matches this pattern.
     * If it does not, in addition to failing the assert, an innocous URL will be
     * returned.
     *
     * @see http://url.spec.whatwg.org/#concept-relative-url
     * @param {string|!goog.string.TypedString} url The URL to validate.
     * @return {!goog.html.SafeUrl} The validated URL, wrapped as a SafeUrl.
     */
    function sanitizeAssertUnchanged(url: string|goog.string.TypedString): goog.html.SafeUrl;

    /**
     * Package-internal utility method to create SafeUrl instances.
     *
     * @param {string} url The string to initialize the SafeUrl object with.
     * @return {!goog.html.SafeUrl} The initialized SafeUrl object.
     * @package
     */
    function createSafeUrlSecurityPrivateDoNotAccessOrElse(url: string): goog.html.SafeUrl;

    /**
     * A SafeUrl corresponding to the special about:blank url.
     * @const {!goog.html.SafeUrl}
     */
    const ABOUT_BLANK: any /*missing*/;
}
